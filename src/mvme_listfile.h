/* mvme - Mesytec VME Data Acquisition
 *
 * Copyright (C) 2016-2023 mesytec GmbH & Co. KG <info@mesytec.com>
 *
 * Author: Florian LÃ¼ke <f.lueke@mesytec.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
#ifndef __MVME_LISTFILE_H__
#define __MVME_LISTFILE_H__

#include "typedefs.h"
#include "libmvme_export.h"

/* Definition of the mvme listfile/data stream format.
 *
 * This format contains a JSON encoded representation of a MVME VME
 * configuration (crates, events, modules, module register settings) followed
 * by raw readout data and additional DAQ run status information.
 *
 * This listfile format is used internally by mvme to store and replay readout
 * data to/from file. Additionally data streams containing this format can be
 * passed to consumer subprocesses started by mvme.
 *
 * The basic structure is a section with a type and a length. The possible
 * section types are defined below (ListfileSections::SectionType enum).
 *
 * For readout data resulting from a specific VME trigger/event a section of
 * type SectionType_Event is used and further divided into module subsections.
 * Each of these subsections contains the raw data produced by the readout of
 * the corresponding module.
 *
 * Illustration of the structure:
 *
 *   Event section event_idx=0
 *     Module section, module_idx=0
 *       Module 0.0 data word 0
 *       Module 0.0 data word 1
 *       ...
 *     Module section, module_idx=1
 *       Module 0.1 data word 0
 *       Module 0.1 data word 1
 *       ...
 *     EndMarker
 *   Event section event_idx=1
 *     Module section, module_idx=0
 *       Module 1.0 data word 0
 *       Module 1.0 data word 1
 *       ...
 *     Module section, module_idx=1
 *       Module 1.1 data word 0
 *       Module 1.1 data word 1
 *       ...
 *     EndMarker
 *
 * All data is 32-bit aligned, section sizes are counted in units of 32-bit
 * words. Special EndMarker words are added at the end of Event type sections
 * and are inserted into the data stream by the readout commands executed by
 * the VME controller. These EndMarkers can be used for additional consistency
 * checks.
 */

namespace ListfileSections
{
    enum SectionType
    {
        /* The config section contains the mvmecfg as a json string padded with
         * spaces to the next 32 bit boundary. If the config data size exceeds
         * the maximum section size multiple config sections will be written at
         * the start of the file. */
        SectionType_Config      = 0,

        /* Readout data generated by one VME Event. Contains module data
         * subsections. */
        SectionType_Event       = 1,

        /* Last section written to a listfile before closing the file. Contains
         * the current date and time as an ISO 8601 formatted string padded
         * with zeroes to the next 32-bit boundary (same as Timetick sections).
         * Should be used to verify that a file was correctly written and when
         * reading that all data has been read. */
        SectionType_End         = 2,

        /* Marker section written once at the start of a run and then once per
         * elapsed second. Contains the current date and time as an ISO 8601
         * formatted string padded with zeroes to the next 32-bit boundary. */
        SectionType_Timetick    = 3,

        /* Section marking the beginning and end of a user initiated pause.
         * Contains a single data word with value 0 for pause and value 1 for
         * resume. */
        SectionType_Pause       = 4,

        /* Max section type possible. */
        SectionType_Max         = 7
    };

    enum PauseAction
    {
        Pause = 0,
        Resume = 1,
    };
};

/* Basic versioning support. This value specifices the current (latest) version
 * of the format. Older versions can still be loaded and replayed but are not
 * produced by mvme anymore. */
static const u32 CurrentListfileVersion = 2;

/* Constants to be used when interpreting a mvme formatted data stream. A
 * reference to the correct instance of this structure can be obtained using
 * the function listfile_constants() and passing the desired version number. */
struct LIBMVME_EXPORT ListfileConstants
{
    u32 Version;                // mvme listfile/stream format version
    char FourCC[4];             // The four Character Code at the start of a listfile: "MVME".
                                // Written to listfiles since format version 1.

    int FirstSectionOffset;     // Offset in bytes to reach the header of the first section in the
                                // file.

    // Applicable for all section headers
    u32 SectionMaxWords;        // Max number of words in a section.
    u32 SectionMaxSize;         // Max number of bytes in a section.
    u32 SectionTypeMask;        // Mask to extract the section type from a section header
    int SectionTypeShift;       // Shift for the section type.
    u32 SectionSizeMask;        // Section size extraction mask.
    int SectionSizeShift;       // Section size extraction shift.

    // VME crate index stored in SectionType_Event headers
    int CrateIndexMask;
    int CrateIndexShift;

    // VME event index stored in SectionType_Event headers
    int EventIndexMask;
    int EventIndexShift;

    // Module data subsections contained within event sections
    u32 ModuleDataMaxWords;
    u32 ModuleDataMaxSize;
    u32 ModuleDataSizeMask;
    int ModuleDataSizeShift;
    u32 ModuleTypeMask;         // Module type: a unique integer specific to a certain VME module.
    int ModuleTypeShift;        // Concrete values are defined in the mvme module templates contain
                                // in the 'templates' subdirectory of the mvme installation.

    // EndMarker word used to split readout data from multiple modules and to enable additional
    // consistency checks. This data word does not collide with any data words produced by mesytec
    // VME modules.
    u32 EndMarker = 0x87654321u;

    // Mask and shift operations to extract information from section and
    // module data header words.

    u32 getSectionType(u32 sectionHeader) const;
    u32 getSectionSize(u32 sectionHeader) const;

    u32 getCrateIndex(u32 eventSectionHeader) const;
    u32 getEventIndex(u32 eventSectionHeader) const;
    u32 getModuleType(u32 moduleDataHeader) const;
    u32 getModuleDataSize(u32 moduleDataHeader) const;

    u32 makeEventSectionHeader(u32 eventIndex, u32 crateIndex = 0) const;

    bool hasCrateIndex() const;
};

/* The the correct instance of ListfileConstants for the given version number.
 * Defaults to the latest format version. */
LIBMVME_EXPORT const ListfileConstants &listfile_constants(u32 version = CurrentListfileVersion);

/* Static global constants table by format version. Use listfile_constants()
 * above to get the correct instance. */
extern const ListfileConstants ListfileConstantsTable[CurrentListfileVersion + 1];

#endif /* __MVME_LISTFILE_H__ */
