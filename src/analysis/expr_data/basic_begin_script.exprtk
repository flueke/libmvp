# Output Definition Script
# ==============================================================================
# The purpose of this script is to define the number and properties of the
# output arrays the expression operator should have. This Output Defintion
# Script is only executed once at analysis startup time.
#
# The operators inputs need to be connected and properly named before this
# script will work.
#
# The script has to return a sequence of tuples with the following form and
# data types:
#
#  out_name, out_unit, out_size, out_lower_limit, out_upper_limit
#  String,   String,   Scalar,   Scalar/Array,    Scalar/Array
#
# One of these tuples defines one output array. out_name has to be a valid
# exprtk identifier. This is the variable name for the output in the "Step
# Expression" script. out_unit may be an empty string (use '' in that case) and
# out_size must be a positive integer value.
# The limits can either be specified using two scalars, which will set the same
# limit for each of the output parameters, or two arrays - each having out_size
# elements - can be used if individual limits for each parameter are needed.
#
# The script has access to all currently defined and connected inputs. For each
# input if the input is connected to an array the following variables are
# defined:
#
#   input_name.unit, input_name.size, input_name.lower_limits, input_name.upper_limits
#
# If the input is connected to a single parameter the variables are:
#
#   input_name.unit, input_name.lower_limit, input_name.upper_limit
#
# The example code below creates one output named 'output0' having the same
# properties as the input array 'input0' ("pass through").
#
# return [
#     'output0', input0.unit, input0.size, input0.lower_limits, input0.upper_limits
# ];
#
# Multiple outputs with the second output using double values instead of arrays
# for the limit specification
#
# return [
#     'output0', input0.unit, input0.size, input0.lower_limits, input0.upper_limits,
#     'output1', 'MeV',       8,           0.0,                 100.0
# ];

# Static variables
# ----------------
# Static variables may also be defined and initialized in this script using the
# make_static() function. These variables are available in the "Step
# Expression" and will keep their values throughout a DAQ run/replay.
# make_static() comes in three variants:
#
# make_static(name, value)              Creates a static scalar and assigns the given value.
# make_static(name, size, init_value)   Creates a static array of the given size and sets
#                                       each element to the initial value.
# make_static(name, array)              Creates a static array from a locally defined array.
#
# Examples:
# make_static('my_static_var', 3.14);
# make_static('my_static_array0', 4, 42);       # 4 element array, each element set to 42
# var local_array[4] := { 4, 3, 2, 1};
# make_static('my_static_array1', local_array); # static array initialized from a local variable

return [
    'output0', input0.unit, input0.size, input0.lower_limits, input0.upper_limits
];

# Syntax example:
# var x := 42;
# var y := 3*x - 23;
# var a0[5] := { 0, 1, 2, 3, 4 };
# var a1[10];
# var a0_len := a0[]; // array length
#
# for (var i := 0; i < a1[]; i += 1) {
#     if (i = 0) { // '==' works too for comparison
#         a1[i] := is_valid(y) ? y^2 : 3.14;
#     } else {
#         a1[i] := i;
#     }
# }
